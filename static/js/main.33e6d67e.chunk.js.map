{"version":3,"sources":["components/newList.js","App.js","reportWebVitals.js","index.js"],"names":["NewsList","resultList","getGoogleRss","newsTarget","axios","get","then","res","xml","data","parseString","err","result","rss","channel","item","setState","items","sort","a","b","Date","pubDate","filter","d","setDate","getDate","console","log","catch","state","ListItemLink","props","ListItem","button","component","Button","variant","color","onClick","this","dateFormat","List","aria-label","map","index","href","link","target","ListItemText","primary","title","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAwFeA,E,kDAzEX,aAAe,IAAD,8BACV,gBAHJC,WAAa,GAEC,EAQdC,aAAe,SAACC,GAIZC,IAAMC,IAAN,UADe,uCACf,sFAA0GC,MAAK,SAACC,GAE5G,IAAIC,EAAMD,EAAIE,KAEdC,sBAAYF,GAAK,SAACG,EAAKC,GACP,OAARD,GAKJ,EAAKV,WAAaW,EAAOC,IAAIC,QAAQ,GAAGC,KACxC,EAAKC,SAAS,CACVC,MAAO,EAAKhB,WAAWiB,MAAK,SAACC,EAAGC,GAC5B,OAAO,IAAIC,KAAKF,EAAEG,SAAW,IAAID,KAAKD,EAAEE,UAAY,EAAI,KACzDC,QAAO,SAAAR,GACN,IAAIS,EAAI,IAAIH,KAEZ,OADAG,EAAEC,QAAQD,EAAEE,UAAY,GACjB,IAAIL,KAAKN,EAAKO,UAAYE,QAXrCG,QAAQC,IAAIjB,SAerBkB,OAAM,SAAAlB,GACLgB,QAAQC,IAAIjB,OAhChB,EAAKmB,MAAQ,CACTb,MAAO,IAHD,E,0CAsCd,WACI,SAASc,EAAaC,GAClB,OAAO,cAACC,EAAA,EAAD,aAAUC,QAAM,EAACC,UAAU,KAAQH,IAG9C,OACI,gCACI,cAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAASC,KAAKtC,aAA1D,uBACA,cAACkC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,QAAlC,SAA4CG,IAAW,IAAIpB,KAAQ,yBAUnE,cAACqB,EAAA,EAAD,CAAMP,UAAU,MAAMQ,aAAW,4BAAjC,SACKH,KAAKV,MAAMb,MAAM2B,KAAI,SAAC7B,EAAM8B,GAAP,OAClB,qCAAO,4BAAgBJ,IAAW,IAAIpB,KAAKN,EAAKO,SAAU,wBAA3CuB,GACX,cAACd,EAAD,CAAce,KAAM/B,EAAKgC,KAAMC,OAAO,IAAtC,SAGI,cAACC,EAAA,EAAD,CAAcC,QAASnC,EAAKoC,yB,GAlErCC,aCARC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnD,MAAK,YAAkD,IAA/CoD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.33e6d67e.chunk.js","sourcesContent":["\nimport { Component } from 'react'\nimport { parseString } from 'react-native-xml2js';\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React from 'react';\nimport dateFormat from \"dateformat\";\n\nclass NewsList extends Component {\n    // 結果保存変数\n    resultList = []\n\n    constructor() {\n        super();\n        this.state = {\n            items: []\n        }\n    }\n\n    // Google Rss \n    getGoogleRss = (newsTarget) => {\n        // http-proxy-middleware\n        // axios.get(`/api/rss/search?hl=ja&gl=JP&ceid=JP:ja&q=%E6%97%A5%E7%B5%8C225`).then((res) => {\n        var proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n        axios.get(`${proxyUrl}https://news.google.com/rss/search?hl=ja&gl=JP&ceid=JP:ja&q=%E6%97%A5%E7%B5%8C225`).then((res) => {\n            //RSS 結果\n            var xml = res.data\n            //XML解析\n            parseString(xml, (err, result) => {\n                if (err !== null) {\n                    console.log(err)\n                    return\n                }\n                //RSS 新聞内容取得\n                this.resultList = result.rss.channel[0].item\n                this.setState({\n                    items: this.resultList.sort((a, b) => {\n                        return new Date(a.pubDate) > new Date(b.pubDate) ? -1 : 1\n                    }).filter(item => {\n                        let d = new Date()\n                        d.setDate(d.getDate() - 7)\n                        return new Date(item.pubDate) >= d\n                    })\n                })\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    render() {\n        function ListItemLink(props) {\n            return <ListItem button component=\"a\" {...props} />;\n        }\n\n        return (\n            <div>\n                <Button variant=\"contained\" color=\"primary\" onClick={this.getGoogleRss}> Get TRSS</Button>\n                <Button variant=\"contained\" color=\"error\" >{dateFormat(new Date(), \"yyyy/mm/dd HH:MM:ss\")}</Button>\n                {/* <ul>\n                    {\n                        this.state.items.map((item, index) => (\n                            <a href={item.link} key={index} target=\"_\">\n                                <li>{item.title}</li>\n                            </a>\n                        ))\n                    }\n                </ul> */}\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n                    {this.state.items.map((item, index) => (\n                        <div>  <p key={index}>{dateFormat(new Date(item.pubDate), \"yyyy-mm-dd HH:MM:ss\")}</p>\n                            <ListItemLink href={item.link} target=\"_\"\n                            >\n\n                                <ListItemText primary={item.title} />\n                            </ListItemLink>\n                        </div>\n                    ))}\n                </List>\n            </div >\n        )\n    }\n\n}\n\nexport default NewsList","import './App.css';\n\nimport NewsList from './components/newList'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NewsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}